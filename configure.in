#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ([2.63])
AC_INIT(xevxml, 0.1.0, takizawa@cc.tohoku.ac.jp)
AC_CONFIG_SRCDIR([src/common.hpp])
AC_CONFIG_HEADERS([src/config.h])

# Checks for programs.
AC_PROG_CXX
AC_PROG_CC
AC_PROG_MAKE_SET
AC_PROG_INSTALL

dnl Set install paths.
if test "x$prefix" = "xNONE" ; then
  prefix="/usr/local"
fi
if test "x$exec_prefix" = "xNONE" ; then
  exec_prefix=$prefix
fi
PREFIX=$prefix
AC_SUBST([PREFIX])
BINDIR=`eval echo $bindir`
BINDIR=`eval echo $BINDIR`
AC_SUBST([BINDIR])
LIBDIR=`eval echo $libdir`
LIBDIR=`eval echo $LIBDIR`
AC_SUBST([LIBDIR])
INCDIR=`eval echo $includedir`
INCDIR=`eval echo $INCDIR`
AC_SUBST([INCDIR])



# Checks for libraries.
# ROSE
ROSE_DIR="/usr/local"

AC_ARG_WITH(rosedir,
[  --with-rosedir=DIR    use ROSE in DIR (default is /use/local)],
[
ROSE_DIR=$withval
])

CPPFLAGS="${CPPFLAGS} -I${ROSE_DIR}/include -I${ROSE_DIR}/include/rose"
LDFLAGS="${LDFLAGS} -L${ROSE_DIR}/lib -lrose"
AC_LANG_PUSH([C++])
AC_MSG_CHECKING(for ROSE library)
AC_CACHE_VAL(ac_cv_librose,
[
	AC_TRY_LINK([#include <rose.h>],
	[SgIntVal* iv = isSgIntVal((SgNode*)NULL);],
	[ac_cv_librose="yes"],
	[ac_cv_librose="no"])
])
AC_MSG_RESULT($ac_cv_librose)
if test "x$ac_cv_librose" != "xyes"; then
AC_MSG_ERROR([ROSE is not available. Use --with-rosedir option to specify the ROSE directory.])
fi
if test "x${ROSE_DIR}" != "x"; then
ROSE_CFLAGS="-I${ROSE_DIR}/include -I${ROSE_DIR}/include/rose"
ROSE_LIBS="-L${ROSE_DIR}/lib -lrose"
else
ROSE_LIBS="-lrose"
fi
AC_LANG_POP([C++])
AC_SUBST(ROSE_DIR)
AC_SUBST(ROSE_CFLAGS)
AC_SUBST(ROSE_LIBS)

CPPFLAGS=${_cppflags}
LDFLAGS=${_ldflags}

# checking for Xerces-c
XERCESC_DIR="."

AC_ARG_WITH(xercescdir,
[  --with-xercescdir=DIR    use XERCES-C in DIR],
[
XERCESC_DIR=$withval
])

CPPFLAGS="${CPPFLAGS} -I${XERCESC_DIR}/include"
LDFLAGS="${LDFLAGS} -L${XERCESC_DIR}/lib -lxerces-c"
AC_LANG_PUSH([C++])
AC_MSG_CHECKING(for Xerces-C library)
AC_CACHE_VAL(ac_cv_libxercesc,
[
	AC_TRY_LINK([#include <xercesc/util/PlatformUtils.hpp>],
	[xercesc::XMLPlatformUtils::Initialize()],
	[ac_cv_libxercesc="yes"],
	[ac_cv_libxercesc="no"])
])
AC_MSG_RESULT($ac_cv_libxercesc)
if test "x$ac_cv_libxercesc" != "xyes"; then
AC_MSG_ERROR([Xerces-c is not available. Use --with-xercescdir option to specify the Xerces-c directory.])
fi
if test "x${XERCESC_DIR}" != "x."; then
XERCESC_CFLAGS="-I${XERCESC_DIR}/include"
XERCESC_LIBS="-L${XERCESC_DIR}/lib -lxerces-c"
else
XERCESC_DIR=""
XERCESC_LIBS="-lxerces-c"
fi
AC_LANG_POP([C++])
AC_SUBST(XERCESC_DIR)
AC_SUBST(XERCESC_CFLAGS)
AC_SUBST(XERCESC_LIBS)

CPPFLAGS=${_cppflags}
LDFLAGS=${_ldflags}

# checking for Xalan-c
XALANC_DIR="."

AC_ARG_WITH(xalancdir,
[  --with-xalancdir=DIR    use Xalan-C in DIR],
[
XALANC_DIR=$withval
])

CPPFLAGS="${CPPFLAGS} ${XERCESC_CFLAGS} -I${XALANC_DIR}/include"
LDFLAGS="${LDFLAGS} ${XERCESC_LIBS} -L${XALANC_DIR}/lib -lxalan-c"
AC_LANG_PUSH([C++])
AC_MSG_CHECKING(for Xalan-C library)
AC_CACHE_VAL(ac_cv_libxalanc,
[
	AC_TRY_LINK([#include <xalanc/XalanTransformer/XalanTransformer.hpp>],
	[xalanc::XalanTransformer::initialize()],
	[ac_cv_libxalanc="yes"],
	[ac_cv_libxalanc="no"])
])
AC_MSG_RESULT($ac_cv_libxalanc)
if test "x$ac_cv_libxalanc" != "xyes"; then
AC_MSG_ERROR([Xalan-c is not available. Use --with-xalancdir option to specify the Xalan-c directory.])
fi
if test "x${XALANC_DIR}" != "x."; then
XALANC_CFLAGS="-I${XALANC_DIR}/include"
XALANC_LIBS="-L${XALANC_DIR}/lib -lxalan-c"
else
XALANC_DIR=""
XALANC_LIBS="-lxalan-c"
fi
AC_LANG_POP([C++])
AC_SUBST(XALANC_DIR)
AC_SUBST(XALANC_CFLAGS)
AC_SUBST(XALANC_LIBS)

CPPFLAGS=${_cppflags}
LDFLAGS=${_ldflags}



# Checks for header files.
AC_CHECK_HEADERS([stdlib.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_RESTRICT
AC_TYPE_SIZE_T

# Checks for library functions.
AC_FUNC_MALLOC
AC_CHECK_FUNCS([dup2 memset strtoul])

AC_CONFIG_FILES([build/common.mk])
AC_OUTPUT
